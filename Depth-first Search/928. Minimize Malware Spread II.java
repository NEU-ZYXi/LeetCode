
/*

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
Some nodes initial are initially infected by malware. 
Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, 
both nodes will be infected by malware.  
This spread of malware will continue until no more nodes can be infected in this manner.
Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  
Return the node that if removed, would minimize M(initial).  
If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:
Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1

*/

/*

Solution 1: for each initial node, use union find for connected components excluding the current initial node
            then for each parent, count the number of initial nodes for it
            for the current node, if graph[cur][i]='1' and i node only has no other initial nodes, accumulate the size of it
O(n^3),O(n)            

*/

class UnionFind {
    private int[] id;
    private int[] rank;

    public UnionFind(int n) {
        this.id = new int[n];
        this.rank = new int[n];
        for (int i = 0; i < n; ++i) {
            this.id[i] = i;
            this.rank[i] = 1;
        }
    }

    public int find(int i) {
        while (i != id[i]) {
            i = id[i];
            id[i] = id[id[i]];
        }
        return i;
    }

    public void union(int p, int q) {
        int rootP = find(p), rootQ = find(q);
        if (rootP == rootQ) {
            return;
        } else if (rank[rootP] > rank[rootQ]) {
            rank[rootP] += rank[rootQ];
            id[rootQ] = id[rootP];
        } else {
            rank[rootQ] += rank[rootP];
            id[rootP] = id[rootQ];
        }
    }
}

public int minMalwareSpread(int[][] graph, int[] initial) {
    Arrays.sort(initial);
    int max = 0, ans = initial[0];
    for (int cur : initial) {
        int cnt = count(graph, initial, cur);
        if (cnt > max) {
            max = cnt;
            ans = cur;
        }
    }
    return ans;
}

private int count(int[][] graph, int[] initial, int cur) {
    int n = graph.length, cnt = 0;
    UnionFind uf = new UnionFind(n);
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i != cur && j != cur && graph[i][j] == 1) {
                uf.union(i, j);
            }
        }
    }
    for (int i : initial) {
        int parent = uf.find(i);
        map.put(parent, map.getOrDefault(parent, 0) + 1);
    }
    for (int i = 0; i < n; ++i) {
        if (graph[cur][i] == 1) {
            int parent = uf.find(i);
            if (map.getOrDefault(parent, 0) == 0) {
                cnt += uf.rank[parent];
            }
        }
    }
    return cnt;
}


/*

Solution 2: for each initial node, DFS to count its infected nodes
            use infected array to track the nodes that can be infected by other initial nodes
O(n^2),O(n)

*/

public int minMalwareSpread(int[][] graph, int[] initial) {
    Arrays.sort(initial);
    int ans = initial[0], max = 0, n = graph.length;
    Set<Integer> infected = new HashSet<>();
    for (int i : initial) {
        infected.add(i);
    }
    for (int i : initial) {
        int cur = 0;
        Set<Integer> vis = new HashSet<>();
        vis.add(i);
        for (int j = 0; j < n; ++j) {
            if (i != j && graph[i][j] == 1) {
                int cnt = dfs(graph, infected, vis, j);
                if (cnt != -1) {
                    cur += cnt;
                }
            }
        }
        if (cur > max) {
            max = cur;
            ans = i;
        }
    }
    return ans;
}

private int dfs(int[][] graph, Set<Integer> infected, Set<Integer> vis, int i) {
    if (vis.contains(i)) {
        return 0;
    }
    if (infected.contains(i)) {
        return -1;
    }
    vis.add(i);
    int ans = 1, n = graph.length;
    for (int j = 0; j < n; ++j) {
        if (i != j && graph[i][j] == 1) {
            int cnt = dfs(graph, infected, vis, j);
            if (cnt == -1) {
                infected.add(i);
                return -1;
            } else {
                ans += cnt;
            }
        }
    }
    return ans;
}





